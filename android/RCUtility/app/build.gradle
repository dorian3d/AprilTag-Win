apply plugin: 'com.android.model.application'

model {
    android {
        compileSdkVersion = 21
        buildToolsVersion = "22.0.1"
        defaultConfig.with {
            applicationId = "com.realitycap.android.rcutility"
            minSdkVersion.apiLevel = 21
            targetSdkVersion.apiLevel = 21
            version = 1
        }
    }
    android.lintOptions {
        abortOnError = false
        warningsAsErrors = false
    }
    android.ndk {
        moduleName = "tracker_wrapper"
        ldLibs += ["log", "GLESv2"]
        stl = "c++_shared"
        cppFlags += "-I" + file("src/main/jni")
        debuggable = true
    }
    def debugSigningConfig
    android.buildTypes {
        release {
            minifyEnabled = false
            proguardFiles += file('proguard-rules.pro')
            signingConfig = debugSigningConfig
        }
        debug {
            minifyEnabled = false
            proguardFiles += file('proguard-rules.pro')
            debuggable = true
        }
        create("relwithdebinfo") {
            minifyEnabled = false
            proguardFiles += file('proguard-rules.pro')
            debuggable = true
            signingConfig = debugSigningConfig
        }
    }
    android.signingConfigs {
        debug {
            debugSigningConfig = it
        }
    }
    android.productFlavors {
        create("rc86") {
            ndk.abiFilters += "x86"
        }
        create("rc64") {
            ndk.abiFilters += "x86_64"
        }
    }
}

project.ext.ndkDir = new com.android.build.gradle.internal.NdkHandler(rootDir, null, "clang", "3.6").getNdkDirectory()

if (file("../../rc_replay/lib/").exists())
    model {
        android.ndk {
            cppFlags += "-I" + file("../../rc_replay/src")
            ldLibs += ["tracker"]
        }
        android.sources {
            main { jni { source { srcDirs += [ "../../rc_replay/src", "src/main/jni" ] } } }
            main { jniLibs { source { srcDirs = [ "../../rc_replay/lib", "src/main/jniLibs" ] } } }
        }
        android.productFlavors {
            rc86 { ndk.ldFlags  += "-L" + file("../../rc_replay/lib/x86") }
            rc64 { ndk.ldFlags  += "-L" + file("../../rc_replay/lib/x86_64") }
        }
    }
else
    apply from: "../../cmake.gradle"

tasks.all { task ->
    if (task.name.contains('Arm') || task.name.startsWith('arm') ||
        task.name.contains('Mips') || task.name.startsWith('mips') ||
        task.name.contains('Rc64') && !task.name.contains('_64') && task.name.contains('86') ||
        task.name.contains('Rc86') &&  task.name.contains('_64'))
        task.enabled = false
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def rsRoot = properties.getProperty('rssdk.dir')

dependencies {
    compile 'com.android.support:support-v13:22.2.0'
    // TODO: not all of these are necessary
    compile files (
            rsRoot + '/libs/PXCACommon_x86.jar',
            rsRoot + '/libs/OpenCL_x86.jar',
            rsRoot + '/libs/PXCAScenePerception_x86.jar',
            rsRoot + '/libs/PXCAPlayback_Camera_x86.jar',
            rsRoot + '/libs/SP_Core_x86.jar',
            rsRoot + '/libs/cilkrts_x86.jar',
            rsRoot + '/libs/metaioTracker_x86.jar',
            rsRoot + '/libs/PXCACommon.jar',
            rsRoot + '/libs/PXCASenseManager.jar',
            rsRoot + '/libs/PXCAPlayback.jar',
            rsRoot + '/libs/PXCAScenePerception.jar',
            rsRoot + '/libs/com.intel.camera2.extensions.depthcamera.jar'
    ).each { assert it.exists() : "$it: Not found.\nYou may need to set rssdk.dir in local.properties" }
}
