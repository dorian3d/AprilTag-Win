apply plugin: 'com.android.model.application'

model {
    android {
        compileSdkVersion = 21
        buildToolsVersion = "22.0.1"
        defaultConfig.with {
            applicationId = "com.realitycap.android.rcutility"
            minSdkVersion.apiLevel = 21
            targetSdkVersion.apiLevel = 21
            version = 1
        }
    }
    android.lintOptions {
        abortOnError = false
    }
    android.ndk {
        moduleName = "tracker_wrapper"
        cppFlags += "-I" + file("../../../corvis/src/filter")
        ldLibs += ["log"]
    }
    android.buildTypes {
        release {
            ndk.ldLibs += ["tracker_release"]
            isMinifyEnabled = false
            proguardFiles += file('proguard-rules.pro')
        }
        debug {
            ndk.ldLibs += ["tracker_debug"]
            isMinifyEnabled = false
            proguardFiles += file('proguard-rules.pro')
            isDebuggable = true
            isJniDebuggable = true
        }
    }
    android.productFlavors {
        create("rc86") {
            ndk.abiFilters += "x86"
            ndk.ldFlags  += "-L" + file("build/cmake/jniLibs/x86")
        }
        create("rc64") {
            ndk.abiFilters += "x86_64"
            ndk.ldFlags  += "-L" + file("build/cmake/jniLibs/x86_64")
        }
    }
    android.sources {
        main { jniLibs { source { srcDirs { "build/cmake/jniLibs" } } } }
    }
    components.android {
        project.ext.ndkDir = new com.android.build.gradle.internal.NdkHandler(project.rootDir,null, "clang","").getNdkDirectory()
        binaries.afterEach { binary ->
            String type = binary.buildType.name
            binary.productFlavors.each { flavor ->
                flavor.ndk.abiFilters.each { arch ->
                    project.tasks.create(name: "makeTracker${arch.capitalize()}${type.capitalize()}", type: Exec) {
                        workingDir   "build/cmake/$arch/$type/"
                        commandLine "cmake", "--build", file("build/cmake/$arch/$type/"), "--", "-j" + project.getGradle().startParameter.maxWorkerCount
                        doLast { copy {
                            from "build/cmake/$arch/$type/libtracker.so"
                            into "build/cmake/jniLibs/$arch"
                            rename { "libtracker_${type}.so" }
                        } }
                    }.dependsOn project.tasks.create(name: "cmakeTracker${arch.capitalize()}${type.capitalize()}", type: Exec) {
                        mkdir        "build/cmake/$arch/$type/"
                        workingDir   "build/cmake/$arch/$type/"
                        commandLine "cmake", project.rootDir.parent,
                            "-DCMAKE_BUILD_TYPE=${type.capitalize()}",
                            "-DANDROID_NDK_ROOT=${project.ext.ndkDir}",
                            "-DANDROID_PLATFORM=android-21", "-DANDROID_ARCH=$arch",
                            "-DCMAKE_TOOLCHAIN_FILE=Android.toolchain.cmake"
                    }
                }
            }
        }
    }
}

tasks.all { task ->
    if (task.name.contains('Arm') || task.name.startsWith('arm') ||
        task.name.contains('Mips') || task.name.startsWith('mips') ||
        task.name.contains('Rc64') && !task.name.contains('_64') && task.name.contains('86') ||
        task.name.contains('Rc86') &&  task.name.contains('_64'))
        task.enabled = false
}

tasks.withType(LinkSharedLibrary) { task ->
    java.util.regex.Matcher m = task.name =~ /^link(?i)(x86|x86_64)(Release|Debug).*/;
    if (m.matches() && task.enabled)
        task.dependsOn "makeTracker${m.group(1).capitalize()}${m.group(2).capitalize()}"
}

def rsRoot = "$System.env.RSSDK"
dependencies {
    compile 'com.android.support:support-v13:22.2.0'
    // TODO: not all of these are necessary
    compile files (
            rsRoot + '/libs/PXCACommon_x86.jar',
            rsRoot + '/libs/OpenCL_x86.jar',
            rsRoot + '/libs/PXCAScenePerception_x86.jar',
            rsRoot + '/libs/PXCAPlayback_Camera_x86.jar',
            rsRoot + '/libs/SP_Core_x86.jar',
            rsRoot + '/libs/c++_shared_x86.jar',
            rsRoot + '/libs/cilkrts_x86.jar',
            rsRoot + '/libs/metaioTracker_x86.jar',
            rsRoot + '/libs/PXCACommon.jar',
            rsRoot + '/libs/PXCASenseManager.jar',
            rsRoot + '/libs/PXCAPlayback.jar',
            rsRoot + '/libs/PXCAScenePerception.jar'
    ).each { assert it.exists() : "$it: Not found\nSet RSSDK (currently $rsRoot)" }
}
