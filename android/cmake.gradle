model {
    android.sources {
        main { jniLibs { source { srcDirs { "build/cmake/jniLibs" } } } }
    }
    android.ndk {
        cppFlags += "-I" + file("../../../corvis/src/filter")
    }
    android.productFlavors {
        rc86 {
            ndk.ldFlags  += "-L" + file("build/cmake/jniLibs/x86")
        }
        rc64 {
            ndk.ldFlags  += "-L" + file("build/cmake/jniLibs/x86_64")
        }
    }
    components.android {
        binaries.afterEach { binary ->
            String type = binary.buildType.name
            binary.productFlavors.each { flavor ->
                flavor.ndk.abiFilters.each { arch ->
                    project.tasks.create(name: "makeTracker${arch.capitalize()}${type.capitalize()}", type: Exec) {
                        workingDir   "build/cmake/$arch/$type/"
                        commandLine "cmake", "--build", file("build/cmake/$arch/$type/"), "--", "-j" + project.getGradle().startParameter.maxWorkerCount
                        doLast { copy {
                            from "build/cmake/$arch/$type/libtracker${type == 'debug' ? '_debug' : ''}.so"
                            into "build/cmake/jniLibs/$arch"
                        } }
                    }.dependsOn project.tasks.create(name: "cmakeTracker${arch.capitalize()}${type.capitalize()}", type: Exec) {
                        mkdir        "build/cmake/$arch/$type/"
                        workingDir   "build/cmake/$arch/$type/"
                        commandLine "cmake", project.rootDir.parent,
                            "-DCMAKE_BUILD_TYPE=${type.capitalize()}",
                            "-DANDROID_NDK_ROOT=${project.ext.ndkDir}",
                            "-DANDROID_PLATFORM=android-21", "-DANDROID_ARCH=$arch",
                            "-DCMAKE_TOOLCHAIN_FILE=Android.toolchain.cmake"
                    }
                }
            }
        }
    }
}

tasks.withType(LinkSharedLibrary) { task ->
    java.util.regex.Matcher m = task.name =~ /^link(?i)(x86|x86_64)(Release|Debug).*/;
    if (m.matches() && task.enabled)
        task.dependsOn "makeTracker${m.group(1).capitalize()}${m.group(2).capitalize()}"
}

task rcRelease(type: Copy) {
    from "build/cmake/jniLibs"
    from "../../../corvis/src/filter/rc_intel_interface.h"
    into "src/main/jniLibs"
}
