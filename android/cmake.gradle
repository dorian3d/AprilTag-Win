task rcHeader(type: Copy) {
    from "../../../corvis/src/filter/rc_intel_interface.h"
    from "../../../corvis/src/tracker"
    include "*.cpp"
    include "*.h"
    into "../../rc_replay/src"
}
task rcSource(type: Copy, dependsOn: rcHeader) {
    from "../../../corvis/src/tools/rc_replay.cpp"
    from "../../../corvis/src/tracker/README"
    rename "rc_replay.cpp", "main.cpp"
    into "../../rc_replay"
}
task rcRelease(type: Copy, dependsOn: [rcHeader, rcSource]) {
    from "build/cmake/jniLibs"
    include "*/libtracker.so"
    into "../../rc_replay/lib"
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def mklRoot = properties.getProperty('mkl.dir')
if (!mklRoot) throw new GradleException('You may need to set mkl.dir in local.properties')

model {
    android.sources {
        main { jniLibs { source { srcDirs = ["build/cmake/jniLibs"] } } }
        main { jni { source { srcDirs = ["../../../corvis/src/tracker", "src/main/jni"] } } }
    }
    android.ndk {
        cppFlags.add "-I" + file("../../../corvis/src/filter")
        cppFlags.add "-I" + file("../../../corvis/src/tracker")
    }
    android.productFlavors {
        rc86 {
            ndk.ldFlags.add "-L" + file("build/cmake/jniLibs/x86")
        }
        rc64 {
            ndk.ldFlags.add "-L" + file("build/cmake/jniLibs/x86_64")
        }
    }
    android.buildTypes {
        release        { ndk.ldLibs.add "tracker" }
        debug          { ndk.ldLibs.add "tracker_debug" }
        relwithdebinfo { ndk.ldLibs.add "tracker_relwithdebinfo" }
    }
    components.android {
        binaries.afterEach { binary ->
            String type = binary.buildType.name
            binary.productFlavors.each { flavor ->
                flavor.ndk.abiFilters.each { arch ->
                    def make = project.tasks.create(name: "makeTracker${arch.capitalize()}${type.capitalize()}", type: Exec) {
                        workingDir   "build/cmake/$arch/$type/"
                        commandLine "cmake", "--build", file("build/cmake/$arch/$type/"), "--", "-j" + project.getGradle().startParameter.maxWorkerCount
                        doLast { copy {
                            from "build/cmake/$arch/$type/corvis/src/libtracker${type == 'release' ? '' : '_' + type}.so"
                            into "build/cmake/jniLibs/$arch"
                        } }
                    }.dependsOn(project.tasks.create(name: "cmakeTracker${arch.capitalize()}${type.capitalize()}", type: Exec) {
                        mkdir        "build/cmake/$arch/$type/"
                        workingDir   "build/cmake/$arch/$type/"
                        commandLine "cmake", project.rootDir.parent,
                            "-DCMAKE_BUILD_TYPE=${type.capitalize()}",
                            "-DANDROID_NDK_ROOT=${project.ext.ndkDir}",
                            "-DANDROID_PLATFORM=android-21", "-DANDROID_ARCH=$arch",
                            "-DCMAKE_TOOLCHAIN_FILE=Android.toolchain.cmake",
                            "-DMKLROOT=$mklRoot"
                   });
                   if (type == "release")
                      rcRelease.dependsOn(make)
                }
            }
        }
    }
}

tasks.withType(LinkSharedLibrary) { task ->
    java.util.regex.Matcher m = task.name =~ /^link(?i)(x86|x86_64)(Release|Debug|Relwithdebinfo).*/;
    if (m.matches() && task.enabled)
        task.dependsOn "makeTracker${m.group(1).capitalize()}${m.group(2).capitalize()}"
}
