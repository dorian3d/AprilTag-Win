find_path(CBLAS_INCLUDE cblas.h)
find_library(CBLAS_LIBRARY NAMES blas)
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(cblas DEFAULT_MSG CBLAS_INCLUDE CBLAS_LIBRARY) # FAIL_MESSAGE "Unabled to find MKL, Accelerate or CBLAS")
if (CBLAS_FOUND)
    add_library(blas INTERFACE)
    target_include_directories(blas INTERFACE ${CBLAS_INCLUDE})
    target_link_libraries(blas INTERFACE ${CBLAS_LIBRARY})

    find_path(LAPACKE_INCLUDE lapacke.h)
    find_library(LAPACKE_LIBRARY lapacke)
    find_library(LAPACK_LIBRARY lapack)
    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(lapacke DEFAULT_MSG LAPACKE_INCLUDE LAPACKE_LIBRARY  LAPACK_LIBRARY) # FAIL_MESSAGE "Unabled to find MKL, Accelerate or LAPACKe")
    if (LAPACKE_FOUND)
        add_library(lapacke INTERFACE)
        target_include_directories(lapacke INTERFACE ${LAPACKE_INCLUDE})
        target_link_libraries(lapacke INTERFACE ${LAPACKE_LIBRARY} ${LAPACK_LIBRARY} blas)

        include(CheckCSourceCompiles)
        set(CMAKE_REQUIRED_LIBRARIES ${LAPACKE_LIBRARY} ${LAPACK_LIBRARY} ${CBLAS_LIBRARY})
        check_c_source_compiles("#include \"lapacke.h\"\nint main(int c, char **v){ilaver_(NULL,NULL,NULL);return 0;}" LAPACKE_NEEDS_PTHREAD FAIL_REGEX pthread_create)
        if (LAPACKE_NEEDS_PTHREAD)
            target_link_libraries(lapacke INTERFACE pthread)
        endif()
    endif()
endif()
