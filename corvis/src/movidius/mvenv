#!/bin/bash

SLAM_ROOT=$(cd $(dirname "$BASH_SOURCE") && pwd)
MDK_ROOT=$(pwd)
MDK_NAME=mdk-17.04.05_hotfix.tar.gz
MDK_ORIG_NAME=mdk_release_17.04.5_general_purpose
MDK_CANONICAL=mdk_release_17.04.5_hotfix_general_purpose
MDK_URL=http://artifactoryperc01.iil.intel.com:8081/artifactory/libs-release-local/movidius/mdk/mdk/17.04.05_hotfix/$MDK_NAME

export MDK_INSTALL_DIR=$MDK_ROOT/external/

export MV_COMMON_BASE=$MDK_ROOT/external/$MDK_CANONICAL/mdk/common
export MV_TOOLS_DIR=$MDK_ROOT/external/$MDK_CANONICAL/tools
export MV_TOOLS_VERSION=00.83.4
#export MV_SOC_REV=ma2450
export MV_SOC_REV=ma2150
export MV_SRV_EXTRA_OPT=-freq:15000
if type -p ccache 1>/dev/null 2>/dev/null; then
    export MV_USE_CCACHE=1
fi

# Check for cross-compilation toolchain
if [[ ! -d $MDK_INSTALL_DIR/$MDK_CANONICAL ]]; then
    echo "No MDK found in $MDK_INSTALL_DIR/$MDK_CANONICAL."
    MDK_TAR=$HOME/.$MDK_NAME
    if [[ ! -f $MDK_TAR && -f $MDK_ROOT/external/.mdk/$MDK_NAME ]]; then
        echo "Caching $MDK_ROOT/external/.mdk/$MDK_NAME as $MDK_TAR"
        ln $MDK_ROOT/external/.mdk/$MDK_NAME $MDK_TAR # backward compat
    fi
    if [[ ! -f $MDK_TAR ]]; then
        echo "Downloading MDK... $MDK_URL"
        curl $(tty -s || echo -s) -o $MDK_TAR.$$ -O $MDK_URL &&
        mv $MDK_TAR.$$ $MDK_TAR
    fi
    echo "Untaring MDK..."
    mkdir -p $MDK_INSTALL_DIR/.mdk &&
    tar   -C $MDK_INSTALL_DIR/.mdk -zxf $MDK_TAR &&
    mv       $MDK_INSTALL_DIR/.mdk/$MDK_ORIG_NAME $MDK_INSTALL_DIR/$MDK_CANONICAL
fi

type -p quilt > /dev/null || {
    echo Installing quilt...
    type -p apt-get > /dev/null && sudo apt-get --assume-yes install quilt
    type -p brew    > /dev/null && brew install quilt
}

# Check if all patches have been added
(
    cd $MDK_INSTALL_DIR/$MDK_CANONICAL
    export QUILT_PATCHES=$(realpath --relative-to=. $SLAM_ROOT/mdk_patches)
    if [ "$(quilt series)" != "$(quilt applied)" ]; then
       echo MDK patches need refreshing
       quilt pop -a -f
       quilt push -a
    fi
)

if [[ -d /etc/udev/rules.d ]]; then
    # Install udev rules
    echo "Checking udev rules"
    INSTALLED=false
    for RULE in $SLAM_ROOT/udev/*.rules
    do
        RULEFILE=`basename $RULE`
        if [ ! -f /etc/udev/rules.d/$RULEFILE ]; then
            echo "Installing udev rule $RULEFILE"
            sudo cp $RULE /etc/udev/rules.d/$RULEFILE
            sudo chmod +x /etc/udev/rules.d/$RULEFILE
            INSTALLED=true
        fi
    done
    if [ "$INSTALLED" = true ]; then
        echo "Reloading udev, unplug and replug your devices"
        sudo udevadm control --reload
    else
        echo "All udev rules already installed"
    fi
fi
