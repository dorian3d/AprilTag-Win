#include "gtest/gtest.h"
#include "util.h"
#include "matrix.h"

static f_t A_padded[] = {
             0.00651856,0.0075159,7.65636e-06,0,
             0.0075159,0.0326057,-2.33408e-05,0,
             7.65636e-06,-2.33408e-05,0.0345768,0,
             0,0,0,1,
};

static f_t B_padded[] = {
            -7.97337e-06,-2.53351e-05,1.92629e-05,0,
             7.7408e-06,-3.65932e-06,-2.00035e-06,0,
             3.83459e-07,6.25474e-08,-2.42663e-06,0,
            -7.31693e-07,1.05141e-06,-0.00098288,0,

            -6.65329e-08,4.70554e-07,-0.000261044,0,
             0.000261848,0.000983777,2.05282e-07,0,
            -0.000137619,0.000285825,-0.356927,0,
            -2.44528e-05,5.87314e-05,-0.0951044,0,
};


static f_t R_padded[] = {
    -9.87565897e-05,  -1.04325675e-04,   1.03526524e-04, 0,
     9.58760235e-05,  -8.13343152e-05,  -1.08973981e-05, 0,
     4.74944761e-06,  -2.45325913e-06,  -1.30551945e-05, 0,
    -9.06260532e-06,   1.22478619e-05,  -5.28575370e-03, 0,
    -8.24063389e-07,   3.53702352e-06,  -1.40384866e-03, 0,
     3.24319773e-03,   4.40695204e-03,   4.37739736e-06, 0,
    -1.70452182e-03,   2.87283458e-03,  -1.91949245e+00, 0,
    -3.02867562e-04,   5.61805814e-04,  -5.11455525e-01, 0,
};

TEST(Matrix, SimplePadded)
{
    matrix A(A_padded, 4, 4, 4, 4);
    matrix B(B_padded, 8, 4, 8, 4);
    matrix R(R_padded, 8, 4, 8, 4);
    matrix_half_solve(A, B);

    for(int i = 0; i < 8; i++)
        for(int j = 0; j < 4; j++)
            if (std::fabs( B(i,j) - R(i,j) )          > 25*F_T_EPS &&
                std::fabs((B(i,j) - R(i,j)) / R(i,j)) > 25*F_T_EPS)
                EXPECT_NEAR(B(i,j), R(i,j),             25*F_T_EPS);
}

static f_t chol[] = {  4,  12, -16, 0,
                      12,  37, -43, 0,
                     -16, -43,  98, 0,
                       0,   0,   0, 0};

TEST(Matrix, PositiveDefinite)
{
    matrix A(chol, 3, 3, 4, 4);

    EXPECT_TRUE(test_posdef(A));

    A(1,2) = -44; // not symmetric
    EXPECT_FALSE(test_posdef(A));
    A(1,2) = -43;

    A.resize(4,4); // pos semi-definite
    EXPECT_FALSE(test_posdef(A));
}
